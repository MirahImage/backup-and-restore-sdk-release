// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	azure "github.com/cloudfoundry-incubator/azure-blobstore-backup-restore"
)

type FakeContainer struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	SoftDeleteEnabledStub        func() (bool, error)
	softDeleteEnabledMutex       sync.RWMutex
	softDeleteEnabledArgsForCall []struct{}
	softDeleteEnabledReturns     struct {
		result1 bool
		result2 error
	}
	softDeleteEnabledReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ListBlobsStub        func() ([]azure.Blob, error)
	listBlobsMutex       sync.RWMutex
	listBlobsArgsForCall []struct{}
	listBlobsReturns     struct {
		result1 []azure.Blob
		result2 error
	}
	listBlobsReturnsOnCall map[int]struct {
		result1 []azure.Blob
		result2 error
	}
	CopyBlobsFromStub        func(containerName string, blobsToCopy []azure.Blob) error
	copyBlobsFromMutex       sync.RWMutex
	copyBlobsFromArgsForCall []struct {
		containerName string
		blobsToCopy   []azure.Blob
	}
	copyBlobsFromReturns struct {
		result1 error
	}
	copyBlobsFromReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainer) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeContainer) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeContainer) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainer) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainer) SoftDeleteEnabled() (bool, error) {
	fake.softDeleteEnabledMutex.Lock()
	ret, specificReturn := fake.softDeleteEnabledReturnsOnCall[len(fake.softDeleteEnabledArgsForCall)]
	fake.softDeleteEnabledArgsForCall = append(fake.softDeleteEnabledArgsForCall, struct{}{})
	fake.recordInvocation("SoftDeleteEnabled", []interface{}{})
	fake.softDeleteEnabledMutex.Unlock()
	if fake.SoftDeleteEnabledStub != nil {
		return fake.SoftDeleteEnabledStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.softDeleteEnabledReturns.result1, fake.softDeleteEnabledReturns.result2
}

func (fake *FakeContainer) SoftDeleteEnabledCallCount() int {
	fake.softDeleteEnabledMutex.RLock()
	defer fake.softDeleteEnabledMutex.RUnlock()
	return len(fake.softDeleteEnabledArgsForCall)
}

func (fake *FakeContainer) SoftDeleteEnabledReturns(result1 bool, result2 error) {
	fake.SoftDeleteEnabledStub = nil
	fake.softDeleteEnabledReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) SoftDeleteEnabledReturnsOnCall(i int, result1 bool, result2 error) {
	fake.SoftDeleteEnabledStub = nil
	if fake.softDeleteEnabledReturnsOnCall == nil {
		fake.softDeleteEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.softDeleteEnabledReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) ListBlobs() ([]azure.Blob, error) {
	fake.listBlobsMutex.Lock()
	ret, specificReturn := fake.listBlobsReturnsOnCall[len(fake.listBlobsArgsForCall)]
	fake.listBlobsArgsForCall = append(fake.listBlobsArgsForCall, struct{}{})
	fake.recordInvocation("ListBlobs", []interface{}{})
	fake.listBlobsMutex.Unlock()
	if fake.ListBlobsStub != nil {
		return fake.ListBlobsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listBlobsReturns.result1, fake.listBlobsReturns.result2
}

func (fake *FakeContainer) ListBlobsCallCount() int {
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	return len(fake.listBlobsArgsForCall)
}

func (fake *FakeContainer) ListBlobsReturns(result1 []azure.Blob, result2 error) {
	fake.ListBlobsStub = nil
	fake.listBlobsReturns = struct {
		result1 []azure.Blob
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) ListBlobsReturnsOnCall(i int, result1 []azure.Blob, result2 error) {
	fake.ListBlobsStub = nil
	if fake.listBlobsReturnsOnCall == nil {
		fake.listBlobsReturnsOnCall = make(map[int]struct {
			result1 []azure.Blob
			result2 error
		})
	}
	fake.listBlobsReturnsOnCall[i] = struct {
		result1 []azure.Blob
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) CopyBlobsFrom(containerName string, blobsToCopy []azure.Blob) error {
	var blobsToCopyCopy []azure.Blob
	if blobsToCopy != nil {
		blobsToCopyCopy = make([]azure.Blob, len(blobsToCopy))
		copy(blobsToCopyCopy, blobsToCopy)
	}
	fake.copyBlobsFromMutex.Lock()
	ret, specificReturn := fake.copyBlobsFromReturnsOnCall[len(fake.copyBlobsFromArgsForCall)]
	fake.copyBlobsFromArgsForCall = append(fake.copyBlobsFromArgsForCall, struct {
		containerName string
		blobsToCopy   []azure.Blob
	}{containerName, blobsToCopyCopy})
	fake.recordInvocation("CopyBlobsFrom", []interface{}{containerName, blobsToCopyCopy})
	fake.copyBlobsFromMutex.Unlock()
	if fake.CopyBlobsFromStub != nil {
		return fake.CopyBlobsFromStub(containerName, blobsToCopy)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.copyBlobsFromReturns.result1
}

func (fake *FakeContainer) CopyBlobsFromCallCount() int {
	fake.copyBlobsFromMutex.RLock()
	defer fake.copyBlobsFromMutex.RUnlock()
	return len(fake.copyBlobsFromArgsForCall)
}

func (fake *FakeContainer) CopyBlobsFromArgsForCall(i int) (string, []azure.Blob) {
	fake.copyBlobsFromMutex.RLock()
	defer fake.copyBlobsFromMutex.RUnlock()
	return fake.copyBlobsFromArgsForCall[i].containerName, fake.copyBlobsFromArgsForCall[i].blobsToCopy
}

func (fake *FakeContainer) CopyBlobsFromReturns(result1 error) {
	fake.CopyBlobsFromStub = nil
	fake.copyBlobsFromReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainer) CopyBlobsFromReturnsOnCall(i int, result1 error) {
	fake.CopyBlobsFromStub = nil
	if fake.copyBlobsFromReturnsOnCall == nil {
		fake.copyBlobsFromReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyBlobsFromReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.softDeleteEnabledMutex.RLock()
	defer fake.softDeleteEnabledMutex.RUnlock()
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	fake.copyBlobsFromMutex.RLock()
	defer fake.copyBlobsFromMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ azure.Container = new(FakeContainer)
