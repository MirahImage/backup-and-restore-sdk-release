// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	azure "github.com/cloudfoundry-incubator/azure-blobstore-backup-restore"
)

type FakeContainer struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	SoftDeleteIsDisabledStub        func() (bool, error)
	softDeleteIsDisabledMutex       sync.RWMutex
	softDeleteIsDisabledArgsForCall []struct{}
	softDeleteIsDisabledReturns     struct {
		result1 bool
		result2 error
	}
	softDeleteIsDisabledReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ListBlobsStub        func() ([]azure.Blob, error)
	listBlobsMutex       sync.RWMutex
	listBlobsArgsForCall []struct{}
	listBlobsReturns     struct {
		result1 []azure.Blob
		result2 error
	}
	listBlobsReturnsOnCall map[int]struct {
		result1 []azure.Blob
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainer) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeContainer) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeContainer) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainer) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainer) SoftDeleteIsDisabled() (bool, error) {
	fake.softDeleteIsDisabledMutex.Lock()
	ret, specificReturn := fake.softDeleteIsDisabledReturnsOnCall[len(fake.softDeleteIsDisabledArgsForCall)]
	fake.softDeleteIsDisabledArgsForCall = append(fake.softDeleteIsDisabledArgsForCall, struct{}{})
	fake.recordInvocation("SoftDeleteIsDisabled", []interface{}{})
	fake.softDeleteIsDisabledMutex.Unlock()
	if fake.SoftDeleteIsDisabledStub != nil {
		return fake.SoftDeleteIsDisabledStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.softDeleteIsDisabledReturns.result1, fake.softDeleteIsDisabledReturns.result2
}

func (fake *FakeContainer) SoftDeleteIsDisabledCallCount() int {
	fake.softDeleteIsDisabledMutex.RLock()
	defer fake.softDeleteIsDisabledMutex.RUnlock()
	return len(fake.softDeleteIsDisabledArgsForCall)
}

func (fake *FakeContainer) SoftDeleteIsDisabledReturns(result1 bool, result2 error) {
	fake.SoftDeleteIsDisabledStub = nil
	fake.softDeleteIsDisabledReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) SoftDeleteIsDisabledReturnsOnCall(i int, result1 bool, result2 error) {
	fake.SoftDeleteIsDisabledStub = nil
	if fake.softDeleteIsDisabledReturnsOnCall == nil {
		fake.softDeleteIsDisabledReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.softDeleteIsDisabledReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) ListBlobs() ([]azure.Blob, error) {
	fake.listBlobsMutex.Lock()
	ret, specificReturn := fake.listBlobsReturnsOnCall[len(fake.listBlobsArgsForCall)]
	fake.listBlobsArgsForCall = append(fake.listBlobsArgsForCall, struct{}{})
	fake.recordInvocation("ListBlobs", []interface{}{})
	fake.listBlobsMutex.Unlock()
	if fake.ListBlobsStub != nil {
		return fake.ListBlobsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listBlobsReturns.result1, fake.listBlobsReturns.result2
}

func (fake *FakeContainer) ListBlobsCallCount() int {
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	return len(fake.listBlobsArgsForCall)
}

func (fake *FakeContainer) ListBlobsReturns(result1 []azure.Blob, result2 error) {
	fake.ListBlobsStub = nil
	fake.listBlobsReturns = struct {
		result1 []azure.Blob
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) ListBlobsReturnsOnCall(i int, result1 []azure.Blob, result2 error) {
	fake.ListBlobsStub = nil
	if fake.listBlobsReturnsOnCall == nil {
		fake.listBlobsReturnsOnCall = make(map[int]struct {
			result1 []azure.Blob
			result2 error
		})
	}
	fake.listBlobsReturnsOnCall[i] = struct {
		result1 []azure.Blob
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.softDeleteIsDisabledMutex.RLock()
	defer fake.softDeleteIsDisabledMutex.RUnlock()
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ azure.Container = new(FakeContainer)
