// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/database-backup-and-restore/database"
)

type FakeTableChecker struct {
	FindMissingTablesStub        func(tableNames []string) ([]string, error)
	findMissingTablesMutex       sync.RWMutex
	findMissingTablesArgsForCall []struct {
		tableNames []string
	}
	findMissingTablesReturns struct {
		result1 []string
		result2 error
	}
	findMissingTablesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTableChecker) FindMissingTables(tableNames []string) ([]string, error) {
	var tableNamesCopy []string
	if tableNames != nil {
		tableNamesCopy = make([]string, len(tableNames))
		copy(tableNamesCopy, tableNames)
	}
	fake.findMissingTablesMutex.Lock()
	ret, specificReturn := fake.findMissingTablesReturnsOnCall[len(fake.findMissingTablesArgsForCall)]
	fake.findMissingTablesArgsForCall = append(fake.findMissingTablesArgsForCall, struct {
		tableNames []string
	}{tableNamesCopy})
	fake.recordInvocation("FindMissingTables", []interface{}{tableNamesCopy})
	fake.findMissingTablesMutex.Unlock()
	if fake.FindMissingTablesStub != nil {
		return fake.FindMissingTablesStub(tableNames)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findMissingTablesReturns.result1, fake.findMissingTablesReturns.result2
}

func (fake *FakeTableChecker) FindMissingTablesCallCount() int {
	fake.findMissingTablesMutex.RLock()
	defer fake.findMissingTablesMutex.RUnlock()
	return len(fake.findMissingTablesArgsForCall)
}

func (fake *FakeTableChecker) FindMissingTablesArgsForCall(i int) []string {
	fake.findMissingTablesMutex.RLock()
	defer fake.findMissingTablesMutex.RUnlock()
	return fake.findMissingTablesArgsForCall[i].tableNames
}

func (fake *FakeTableChecker) FindMissingTablesReturns(result1 []string, result2 error) {
	fake.FindMissingTablesStub = nil
	fake.findMissingTablesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeTableChecker) FindMissingTablesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.FindMissingTablesStub = nil
	if fake.findMissingTablesReturnsOnCall == nil {
		fake.findMissingTablesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.findMissingTablesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeTableChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMissingTablesMutex.RLock()
	defer fake.findMissingTablesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTableChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ database.TableChecker = new(FakeTableChecker)
