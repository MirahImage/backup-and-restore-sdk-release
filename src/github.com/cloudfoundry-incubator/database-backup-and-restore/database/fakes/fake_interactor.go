// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/database-backup-and-restore/database"
)

type FakeInteractor struct {
	ActionStub        func(artifactFilePath string) error
	actionMutex       sync.RWMutex
	actionArgsForCall []struct {
		artifactFilePath string
	}
	actionReturns struct {
		result1 error
	}
	actionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInteractor) Action(artifactFilePath string) error {
	fake.actionMutex.Lock()
	ret, specificReturn := fake.actionReturnsOnCall[len(fake.actionArgsForCall)]
	fake.actionArgsForCall = append(fake.actionArgsForCall, struct {
		artifactFilePath string
	}{artifactFilePath})
	fake.recordInvocation("Action", []interface{}{artifactFilePath})
	fake.actionMutex.Unlock()
	if fake.ActionStub != nil {
		return fake.ActionStub(artifactFilePath)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.actionReturns.result1
}

func (fake *FakeInteractor) ActionCallCount() int {
	fake.actionMutex.RLock()
	defer fake.actionMutex.RUnlock()
	return len(fake.actionArgsForCall)
}

func (fake *FakeInteractor) ActionArgsForCall(i int) string {
	fake.actionMutex.RLock()
	defer fake.actionMutex.RUnlock()
	return fake.actionArgsForCall[i].artifactFilePath
}

func (fake *FakeInteractor) ActionReturns(result1 error) {
	fake.ActionStub = nil
	fake.actionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInteractor) ActionReturnsOnCall(i int, result1 error) {
	fake.ActionStub = nil
	if fake.actionReturnsOnCall == nil {
		fake.actionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.actionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInteractor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.actionMutex.RLock()
	defer fake.actionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInteractor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ database.Interactor = new(FakeInteractor)
