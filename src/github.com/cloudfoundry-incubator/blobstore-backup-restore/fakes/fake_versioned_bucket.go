// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	blobstore "github.com/cloudfoundry-incubator/blobstore-backup-restore"
	"github.com/cloudfoundry-incubator/blobstore-backup-restore/s3"
)

type FakeVersionedBucket struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	RegionNameStub        func() string
	regionNameMutex       sync.RWMutex
	regionNameArgsForCall []struct{}
	regionNameReturns     struct {
		result1 string
	}
	regionNameReturnsOnCall map[int]struct {
		result1 string
	}
	VersionsStub        func() ([]s3.Version, error)
	versionsMutex       sync.RWMutex
	versionsArgsForCall []struct{}
	versionsReturns     struct {
		result1 []s3.Version
		result2 error
	}
	versionsReturnsOnCall map[int]struct {
		result1 []s3.Version
		result2 error
	}
	CopyVersionsStub        func(regionName, bucketName string, versions []blobstore.BlobVersion) error
	copyVersionsMutex       sync.RWMutex
	copyVersionsArgsForCall []struct {
		regionName string
		bucketName string
		versions   []blobstore.BlobVersion
	}
	copyVersionsReturns struct {
		result1 error
	}
	copyVersionsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVersionedBucket) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeVersionedBucket) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeVersionedBucket) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeVersionedBucket) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeVersionedBucket) RegionName() string {
	fake.regionNameMutex.Lock()
	ret, specificReturn := fake.regionNameReturnsOnCall[len(fake.regionNameArgsForCall)]
	fake.regionNameArgsForCall = append(fake.regionNameArgsForCall, struct{}{})
	fake.recordInvocation("RegionName", []interface{}{})
	fake.regionNameMutex.Unlock()
	if fake.RegionNameStub != nil {
		return fake.RegionNameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.regionNameReturns.result1
}

func (fake *FakeVersionedBucket) RegionNameCallCount() int {
	fake.regionNameMutex.RLock()
	defer fake.regionNameMutex.RUnlock()
	return len(fake.regionNameArgsForCall)
}

func (fake *FakeVersionedBucket) RegionNameReturns(result1 string) {
	fake.RegionNameStub = nil
	fake.regionNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeVersionedBucket) RegionNameReturnsOnCall(i int, result1 string) {
	fake.RegionNameStub = nil
	if fake.regionNameReturnsOnCall == nil {
		fake.regionNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.regionNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeVersionedBucket) Versions() ([]s3.Version, error) {
	fake.versionsMutex.Lock()
	ret, specificReturn := fake.versionsReturnsOnCall[len(fake.versionsArgsForCall)]
	fake.versionsArgsForCall = append(fake.versionsArgsForCall, struct{}{})
	fake.recordInvocation("Versions", []interface{}{})
	fake.versionsMutex.Unlock()
	if fake.VersionsStub != nil {
		return fake.VersionsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.versionsReturns.result1, fake.versionsReturns.result2
}

func (fake *FakeVersionedBucket) VersionsCallCount() int {
	fake.versionsMutex.RLock()
	defer fake.versionsMutex.RUnlock()
	return len(fake.versionsArgsForCall)
}

func (fake *FakeVersionedBucket) VersionsReturns(result1 []s3.Version, result2 error) {
	fake.VersionsStub = nil
	fake.versionsReturns = struct {
		result1 []s3.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionedBucket) VersionsReturnsOnCall(i int, result1 []s3.Version, result2 error) {
	fake.VersionsStub = nil
	if fake.versionsReturnsOnCall == nil {
		fake.versionsReturnsOnCall = make(map[int]struct {
			result1 []s3.Version
			result2 error
		})
	}
	fake.versionsReturnsOnCall[i] = struct {
		result1 []s3.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeVersionedBucket) CopyVersions(regionName string, bucketName string, versions []blobstore.BlobVersion) error {
	var versionsCopy []blobstore.BlobVersion
	if versions != nil {
		versionsCopy = make([]blobstore.BlobVersion, len(versions))
		copy(versionsCopy, versions)
	}
	fake.copyVersionsMutex.Lock()
	ret, specificReturn := fake.copyVersionsReturnsOnCall[len(fake.copyVersionsArgsForCall)]
	fake.copyVersionsArgsForCall = append(fake.copyVersionsArgsForCall, struct {
		regionName string
		bucketName string
		versions   []blobstore.BlobVersion
	}{regionName, bucketName, versionsCopy})
	fake.recordInvocation("CopyVersions", []interface{}{regionName, bucketName, versionsCopy})
	fake.copyVersionsMutex.Unlock()
	if fake.CopyVersionsStub != nil {
		return fake.CopyVersionsStub(regionName, bucketName, versions)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.copyVersionsReturns.result1
}

func (fake *FakeVersionedBucket) CopyVersionsCallCount() int {
	fake.copyVersionsMutex.RLock()
	defer fake.copyVersionsMutex.RUnlock()
	return len(fake.copyVersionsArgsForCall)
}

func (fake *FakeVersionedBucket) CopyVersionsArgsForCall(i int) (string, string, []blobstore.BlobVersion) {
	fake.copyVersionsMutex.RLock()
	defer fake.copyVersionsMutex.RUnlock()
	return fake.copyVersionsArgsForCall[i].regionName, fake.copyVersionsArgsForCall[i].bucketName, fake.copyVersionsArgsForCall[i].versions
}

func (fake *FakeVersionedBucket) CopyVersionsReturns(result1 error) {
	fake.CopyVersionsStub = nil
	fake.copyVersionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVersionedBucket) CopyVersionsReturnsOnCall(i int, result1 error) {
	fake.CopyVersionsStub = nil
	if fake.copyVersionsReturnsOnCall == nil {
		fake.copyVersionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyVersionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVersionedBucket) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.regionNameMutex.RLock()
	defer fake.regionNameMutex.RUnlock()
	fake.versionsMutex.RLock()
	defer fake.versionsMutex.RUnlock()
	fake.copyVersionsMutex.RLock()
	defer fake.copyVersionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVersionedBucket) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ blobstore.VersionedBucket = new(FakeVersionedBucket)
